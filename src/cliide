#!/bin/bash

#INCLUDE (libs/commands.sh)

command="${1}"

function print-help
{
	echo 'Usage: '"${0}"' [command] [options]'
	echo ''
	echo 'project | p <name>'
	echo '	Creates a new project directory.'
	echo ''
	echo 'binary | b <name>'
	echo '	Creates a new binary directory for a binary called <name>.  This'
	echo '	should be executed inside of a project'"'"'s '"'"'src'"'"' directory.'
	echo ''
	echo 'header | h <name>'
	echo '	Creates a new header library directory for a library called <name>.'
	echo '	This should be executed inside of a project'"'"'s '"'"'src'"'"' directory.'
	echo ''
	echo 'constant | c <name> [value]'
	echo '	Defines a constant called <name>, assigned to <value> if provided.'
	echo ''
	echo 'function | f <name>'
	echo '	Sketches a function definition for a function called <name>.'
	echo ''
	echo 'module | m <name>'
	echo '	Creates an empty module called <name>.'
	echo ''
	echo 'struct | s <name>'
	echo '	Sketches a struct definition for a struct called <name>.'
	echo ''
	echo 'typedef | t <name> [type]'
	echo '	Defines a type called <name>, with definition <type> if provided.'
	echo ''
	echo '*'
	echo '	Prints this message.'
}

case "${command}" in
	(project) ;&
	(p) create-project "${2}" ;;
	(binary) ;&
	(b) create-binary "${2}" ;;
	(header) ;&
	(h) create-header "${2}" ;;
	(constant) ;&
	(c) create-constant "${2}" "${3}" ;;
	(function) ;&
	(f) create-function "${2}" ;;
	(module) ;&
	(m) create-module "${2}" ;;
	(struct) ;&
	(s) create-struct "${2}" ;;
	(typedef) ;&
	(t) create-typedef "${2}" "${3}" ;;
	(*) print-help
esac
