special='
type.hpp
struct.hpp
main.hpp
include.hpp
'

pragmaregex='# *pragma *cliide *public'

function list-source-files {
	
	find . -mindepth 1 -maxdepth 1 -type f -regex '\./[^.].*\.hpp' |
	sed -e 's~\./~~' |
	grep -vxF "${special}"
	
}

function list-modules {
	
	find . -mindepth 1 -maxdepth 1 -type d -regex '\./[^.].*' | sed -e 's~\./~~'
	
}

function list-constants {
	
	sourcefiles="$(list-source-files)"
	
	if test -n "${sourcefiles}"
	then
		
		grep -l 'const' ${sourcefiles}
		
	fi
	
}

function list-public-constants {
	
	constants="$(list-constants)"
	
	if test -n "${constants}"
	then
		
		grep -l "${pragmaregex}" ${constants}
		
	fi
	
}

function list-private-constants {
	
	constants="$(list-constants)"
	
	if test -n "${constants}"
	then
		
		grep -L "${pragmaregex}" ${constants}
		
	fi
	
}

function list-functions {
	
	sourcefiles="$(list-source-files)"
	
	if test -n "${sourcefiles}"
	then
		
		grep -L 'const' ${sourcefiles}
		
	fi
	
}

function list-public-functions {
	
	functions="$(list-functions)"

	if test -n "${functions}"
	then
		
		grep -l "${pragmaregex}" ${functions}
		
	fi
	
}

function list-private-functions {
	
	functions="$(list-functions)"
	
	if test -n "${functions}"
	then
		
		grep -L "${pragmaregex}" ${functions}
		
	fi
	
}

function get-typedef {
	
	cat type.hpp | grep -v '^#'
	
}

function get-struct {
	
	cat struct.hpp | grep -v '^#'
	
}

function get-constant-definition {
	
	local expr=':addline;s~.*\(static const [a-zA-Z0-9_]* = .*;\).*~\1~;t :print;N;b addline;:print;p'
	
	cat "${1}" | sed -ne "${expr}"
	
}

function get-function-declaration {
	
	local expr=':addline;s~\(.*\)\n{$~\1;~;t print;N;b addline;:print;p'
	
	cat "${1}" | sed -ne "${expr}"
	
}

function namespace-do {
	
	echo 'namespace '$(cat .module)' {'
	echo '  '
	
	local cwd="$(pwd)"
	for module in $(list-modules)
	do
		
		cd "${module}"
		
		namespace-do "${1}" "${2}"'/'"${module}" | sed -e 's~^\([^#]\)~  \1~;s~^#~#  ~'
		
		cd "${cwd}"
		
	done
	
	${1} "${2}"
	
	echo '  '
	echo '}'
	
}

function pseudo-namespace-do {
	
	local cwd="$(pwd)"
	for module in $(list-modules)
	do
		
		cd "${module}"
		
		pseudo-namespace-do "${1}"
		
		cd "${cwd}"
		
	done
	
	${1}
	
}

function wrap {
	
	topnamespace="$(get-namespace | sed -e 's~[^:]*$~~;s~:*$~~')"
	
	if test -n "${topnamespace}"
	then
		
		echo 'namespace '"${topnamespace}"' {'
		echo '  '
		sed -e 's~^\([^#]\)~  \1~;s~^#~#  ~'
		echo '  '
		echo '}'
		
	else
		
		cat
		
	fi <<< "$(${1})"
	
}

cd "${1}"
set-directory-state
